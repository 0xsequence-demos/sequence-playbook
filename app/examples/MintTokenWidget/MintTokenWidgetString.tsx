export const codeString = "import { Session, SessionSettings } from \"@0xsequence/auth\";\r\nimport { ethers } from \"ethers\";\r\nimport { useOpenConnectModal } from \"@0xsequence/kit\";\r\nimport { findSupportedNetwork, networks } from \"@0xsequence/network\";\r\nimport React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport { Form } from \"react-router\";\r\nimport { serverOnly$ } from \"vite-env-only/macros\";\r\nimport { useAccount } from \"wagmi\";\r\nimport { useWidgetActionData } from \"~/hooks/useWidgetActionData\";\r\n// import { SequenceIndexer } from \"0xsequence/indexer\";\r\n\r\n// const indexerClient = new SequenceIndexer(\r\n//   `https://${import.meta.env.VITE_CHAIN_HANDLE}-indexer.sequence.app`,\r\n//   import.meta.env.VITE_SEQUENCE_PROJECT_ACCESS_KEY,\r\n// );\r\n\r\nexport type MintStatus = \"notStarted\" | \"pending\" | \"successs\" | \"failed\";\r\n\r\nexport const loader = serverOnly$(async (req) => {\r\n  void req;\r\n  console.log(\"Mint Token loader!!\");\r\n  return {\r\n    name: \"Mint Token Widget is my name!\",\r\n  };\r\n});\r\nexport const action = serverOnly$(async (req) => {\r\n  const env = req.context.cloudflare.env;\r\n  const formData = await req.request.formData();\r\n  const walletAddress = formData.get(\"walletAddress\");\r\n  const network = findSupportedNetwork(env.CHAIN_HANDLE)!;\r\n  const relayerUrl = `https://${env.CHAIN_HANDLE}-relayer.sequence.app`;\r\n\r\n  const settings: Partial<SessionSettings> = {\r\n    networks: [\r\n      {\r\n        ...networks[network.chainId],\r\n        rpcUrl: network.rpcUrl,\r\n        relayer: {\r\n          url: relayerUrl,\r\n          provider: {\r\n            url: network.rpcUrl,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  const session = await Session.singleSigner({\r\n    settings: settings,\r\n    signer: env.PKEY,\r\n    projectAccessKey: env.BUILDER_PROJECT_ACCESS_KEY,\r\n  });\r\n\r\n  const signer = session.account.getSigner(network.chainId);\r\n  const collectibleInterface = new ethers.Interface([\r\n    \"function mint(address to, uint256 tokenId, uint256 amount, bytes data)\",\r\n  ]);\r\n  const dataArgs = [walletAddress, 3, 1, \"0x00\"];\r\n  const data = collectibleInterface.encodeFunctionData(\"mint\", dataArgs);\r\n  return await signer.sendTransaction({\r\n    to: env.DEMO_ITEMS_CONTRACT_ADDRESS,\r\n    data,\r\n  });\r\n});\r\nexport const MintTokenWidget = (props: {\r\n  mintStatus: MintStatus;\r\n  setMintStatus: Dispatch<SetStateAction<MintStatus>>;\r\n}) => {\r\n  const { mintStatus, setMintStatus } = props;\r\n  const { address } = useAccount();\r\n\r\n  const { setOpenConnectModal } = useOpenConnectModal();\r\n\r\n  const [txHash, setTxHash] = useState(\"\");\r\n\r\n  const ad = useWidgetActionData(\"MintTokenWidget\");\r\n\r\n  useEffect(() => {\r\n    if (ad?.hash) {\r\n      setMintStatus(\"successs\");\r\n      setTxHash(ad?.hash);\r\n    }\r\n  }, [ad]);\r\n\r\n  return address ? (\r\n    <>\r\n      {mintStatus === \"notStarted\" ? (\r\n        <>\r\n          <Form\r\n            replace\r\n            method=\"post\"\r\n            onSubmit={() => {\r\n              setMintStatus(\"pending\");\r\n            }}\r\n          >\r\n            <input type=\"hidden\" name=\"walletAddress\" value={address} />\r\n            <button type=\"submit\">MINT</button>\r\n          </Form>\r\n        </>\r\n      ) : mintStatus === \"pending\" ? (\r\n        <div>Please wait...</div>\r\n      ) : (\r\n        <div>\r\n          A crude mallet{\" \"}\r\n          <a\r\n            href={`https://sepolia.arbiscan.io/tx/${txHash}`}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <b>is yours!</b>\r\n          </a>\r\n        </div>\r\n      )}\r\n    </>\r\n  ) : (\r\n    <>\r\n      <p>Not connected</p>\r\n      <button onClick={() => setOpenConnectModal(true)}>Connect</button>\r\n    </>\r\n  );\r\n};\r"