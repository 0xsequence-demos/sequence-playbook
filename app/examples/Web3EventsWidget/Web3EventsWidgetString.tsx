export const codeString = "import { useAccount } from \"wagmi\";\r\nimport { useState } from \"react\";\r\nimport { decodeEventLog, formatUnits } from \"viem\";\r\nimport {\r\n  SequenceIndexer,\r\n  SubscribeEventsArgs,\r\n  SubscribeEventsReturn,\r\n  WebrpcError,\r\n} from \"@0xsequence/indexer\";\r\n\r\ntype DecodedEvent = {\r\n  eventData: {\r\n    args: {\r\n      from: string;\r\n      to: string;\r\n      value: bigint;\r\n    };\r\n    eventName: \"Transfer\";\r\n    txHash: string;\r\n  };\r\n};\r\n\r\nexport const Web3EventsWidget = () => {\r\n  const { address } = useAccount();\r\n  const [events, setEvents] = useState<DecodedEvent[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const indexer = new SequenceIndexer(\r\n    \"https://arbitrum-indexer.sequence.app\",\r\n    \"c3bgcU3LkFR9Bp9jFssLenPAAAAAAAAAA\",\r\n  );\r\n\r\n  const req: SubscribeEventsArgs = {\r\n    filter: {\r\n      events: [\"Transfer(address,address,uint256)\"],\r\n      contractAddresses: [\"0xaf88d065e77c8cC2239327C5EDb3A432268e5831\"],\r\n    },\r\n  };\r\n\r\n  const subscribe = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      await indexer.subscribeEvents(req, {\r\n        onMessage: (msg: SubscribeEventsReturn) => {\r\n          const decoded = decodeEventLog({\r\n            abi: [\r\n              {\r\n                type: \"event\",\r\n                name: \"Transfer\",\r\n                inputs: [\r\n                  { indexed: true, name: \"from\", type: \"address\" },\r\n                  { indexed: true, name: \"to\", type: \"address\" },\r\n                  { indexed: false, name: \"value\", type: \"uint256\" },\r\n                ],\r\n              },\r\n            ],\r\n            data: msg.log.rawLog?.data,\r\n            topics: msg.log.rawLog?.topics,\r\n          });\r\n\r\n          setEvents((prev) => [\r\n            ...prev,\r\n            {\r\n              eventData: { ...decoded, txHash: msg.log.txnHash },\r\n            },\r\n          ]);\r\n        },\r\n        onError: (err: WebrpcError) => {\r\n          console.error(\"err\", err);\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to subscribe:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return address ? (\r\n    <div className=\"m-4 space-y-4\">\r\n      <div className=\"flex items-center justify-between gap-4 border rounded-lg bg-white/5 border-white/10 p-2\">\r\n        <span className=\"text-sm\">Listen to USDC transfers on Arbitrum</span>\r\n        <button\r\n          onClick={subscribe}\r\n          disabled={isLoading}\r\n          className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${\r\n            isLoading\r\n              ? \"bg-gray-500/50 cursor-not-allowed\"\r\n              : \"bg-green-500/10 text-green-400 hover:bg-green-500/20\"\r\n          }`}\r\n        >\r\n          {isLoading ? (\r\n            <span className=\"flex items-center gap-2\">\r\n              <div className=\"size-4 border-2 border-white/20 border-t-white/80 rounded-full animate-spin\" />\r\n              Listening...\r\n            </span>\r\n          ) : (\r\n            \"Start Listening\"\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"max-h-[400px] overflow-y-auto space-y-2 [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]\">\r\n        {events.map((event) => (\r\n          <div\r\n            key={event.eventData.txHash}\r\n            className={`m-2 p-4 border rounded-lg transition-colors ${\r\n              event.eventData.args.from.toLowerCase() === address.toLowerCase()\r\n                ? \"bg-red-500/5 border-red-500/10 hover:border-red-500/20\"\r\n                : \"bg-green-500/5 border-green-500/10 hover:border-green-500/20\"\r\n            }`}\r\n          >\r\n            <div className=\"grid gap-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-400\">From</span>\r\n                <span className=\"font-mono text-sm\">\r\n                  {event.eventData.args.from}\r\n                </span>\r\n              </div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-400\">To</span>\r\n                <span className=\"font-mono text-sm\">\r\n                  {event.eventData.args.from}\r\n                </span>\r\n              </div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-gray-400\">Amount</span>\r\n                <span\r\n                  className={`font-mono text-sm font-medium ${\r\n                    event.eventData.args.from.toLowerCase() ===\r\n                    address.toLowerCase()\r\n                      ? \"text-red-400\"\r\n                      : \"text-green-400\"\r\n                  }`}\r\n                >\r\n                  {formatUnits(event.eventData.args.value, 6)} USDC\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <a\r\n              href={`https://arbiscan.io/tx/${event.eventData.txHash}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"text-xs text-gray-500 hover:text-gray-300 transition-colors truncate\"\r\n            >\r\n              View on Arbiscan â†’\r\n            </a>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <p className=\"text-sm text-gray-400\">\r\n      Connect wallet to view USDC transfers\r\n    </p>\r\n  );\r\n};\r"